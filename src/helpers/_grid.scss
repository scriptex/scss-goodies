/// @access public
/// @group helpers
$grid-cols: 12 !default;

/// @access public
/// @group helpers
$grid-sizes: 1, 2, 3, 4, 6 !default;

/// @access public
/// @group helpers
$grid-gutter: 16px !default; // Use anything but % values cuz Firefox does not like it...

/// @access public
/// @group helpers
$grid-element: '.o-grid' !default;

/// @access public
/// @group helpers
$grid-output-css: false !default;

/// @access public
/// @group helpers
$grid-breakpoints: (
	'small': 0px,
	'medium': 768px,
	'large': 1024px
) !default;

/// @access private
/// @group helpers
@function grid-item-width($columns) {
	$items: $grid-cols / $columns;
	$column: 100% / $items;
	$extra-space: $grid-gutter / $items;

	@return calc((#{$column} + #{$extra-space}) - #{$grid-gutter});
}

/// A responsive grid based on CSS Flexbox layout including different sizes based on device width.
///
/// This mixin uses several predefined variables which can be modified:
///
/// `$grid-cols: 12` - maximum number of columns in the grid.
///
/// `$grid-sizes: 1, 2, 3, 4, 6` - list of sizes of the columns in the grid.
///
/// `$grid-gutter: 16px` - spacing between columns in the grid.
///
/// `$grid-element: '.o-grid'` - selector for the grid element.
///
/// `$grid-output-css: true` - boolean which indicates if CSS should be outputted.
///
/// `$grid-breakpoints` - a map of named media query breakpoints.
///
/// ```
/// (
/// 	'small': 0px,
/// 	'medium': 768px,
/// 	'large': 1024px
/// )
/// ```
/// @access public
/// @author Atanas Atanasov <scriptex.bg@gmail.com>
/// @example @include grid(4, 12);
/// @link https://codepen.io/scriptex/pen/zMebLX
/// @group helpers
/// @param {number} $items [4] - Number of items per row
/// @param {number} $gutter [$grid-gutter] - Spacing between items
@mixin grid($items: 4, $gutter: $grid-gutter) {
	display: flex;
	flex-wrap: wrap;

	> * {
		margin-bottom: $gutter;

		@if $items > 1 {
			width: grid-item-width($grid-cols / $items);
		} @else {
			width: 100%;
		}

		&:nth-child(1n) {
			margin-right: $gutter;
		}

		&:nth-child(#{$items}n) {
			margin-right: 0;
		}
	}
}

@if ($grid-output-css) {
	#{$grid-element} {
		width: 100%;

		> * {
			margin-bottom: $grid-gutter;
		}

		@each $name, $breakpoint in $grid-breakpoints {
			@each $size in $grid-sizes {
				@media screen and (min-width: #{$breakpoint}) {
					&[data-grid-items-#{$name}='#{$size}'] {
						@include grid($items: $size);
					}
				}
			}
		}
	}
}
